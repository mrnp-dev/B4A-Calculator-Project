Build1=Default,b4a.example
File1=Layout.bal
FileGroup1=Default Group
Group=Default Group
Library1=core
Library2=xui
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="34"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=Starter
NumberOfFiles=1
NumberOfLibraries=2
NumberOfModules=1
Version=13.1
@EndOfDesignText@
#Region  Project Attributes 
    #ApplicationLabel: Demo Calculator
    #VersionCode: 1
    #VersionName: 
    'SupportedOrientations possible values: unspecified, landscape or portrait.
    #SupportedOrientations: unspecified
    #CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
    #FullScreen: True
    #IncludeTitle: False
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	Private lblPrompt As Label
	Private lblResult As Label
	Private btnSender As Button
	Private lblLog As Label
	Private edtPrompt As EditText
	'Dim anmRes As Animation
	Dim text As String
	Dim promptTxtColor As Int
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("Layout")
	edtPrompt.Enabled = False
	promptTxtColor = lblPrompt.TextColor
	'Dim r As Reflector
End Sub

Private Sub ProcessOperators(operator As String)
	If text.IndexOf2(operator,1) <> -1 Then
		Log(" ")
		'lblLog.Text = lblLog.Text & CRLF & " " & CRLF & "Operator : (" & operator & ") ~~~~~" & CRLF
		Log("Operator : (" & operator & ") ~~~~~")
	End If
	
	Do While text.IndexOf2(operator,1) <> -1
		If operator = "-" Then
			Dim ind As Int = text.IndexOf2(operator,1)
		Else
			Dim ind As Int = text.IndexOf(operator)
		End If
		
		Dim strLeft As String = GetNumberLeft(ind)
		Dim strRight As String = GetNumberRight(ind)
        
		If strLeft = "" Or strRight = "" Or strRight = "-" Then
			Log("Invalid")
			text = ""
			Return ' Exit the subroutine if invalid
		End If
		
		
		Dim strRem As String = strLeft & operator & strRight
		Dim int1 As Float = strLeft.As(Float)
		Dim int2 As Float = strRight.As(Float)
		Dim res As Float
		
		If operator = "÷" And int2 = 0 Then
			text = "Cannot divide by 0"
			Return
		End If

		Select operator
			Case "x"
				res = int1 * int2
				'Log("Running X")
			Case "÷"
				res = int1 / int2
				'Log("Running /")
			Case "%"
				res = (int1 * int2) / 100
			Case "+"
				res = int1 + int2
				'Log("Running +")
			Case "-"
				res = int1 - int2
				'Log("Running -")
		End Select

'		Log("Res: "&res)
'		Log("NFO: " & NumberFormat2(res, 1, 10, 0, False))
		lblLog.Text = lblLog.Text & CRLF & "[ " & (text.Replace(strRem,"(" & strRem & ")") & " ]" & " = " & "[ " & text.Replace(strRem, "(" & NumberFormat2(res, 0, 13, 0, False) & ")")) & " ]"
		Log("[ " & (text.Replace(strRem,"(" & strRem & ")") & " ]" & " = " & "[ " & text.Replace(strRem, "(" & NumberFormat2(res, 0, 13, 0, False) & ")")) & " ]")
		text = text.Replace(strRem, NumberFormat2(res, 0, 13, 0, False))
		'Log("= " & text)
	Loop
    
End Sub

Private Sub GetNumberLeft(ind As Int) As String
	Dim leftCtr As Int = ind
	For row = ind - 1 To 0 Step -1
		If IsNumber(text.CharAt(row)) Or text.CharAt(row) = "."  Then
			leftCtr = row
		Else If text.CharAt(row) = "-" And row = 0 Then
			leftCtr = row
			Exit
		Else
			Exit
		End If
	Next
    
	If leftCtr = ind Then
		'Log("L: True")
		Return ""
	Else
		Return text.SubString2(leftCtr, ind)
	End If
End Sub

Private Sub GetNumberRight(ind As Int) As String
	Dim rightCtr As Int = ind
	For row = ind + 1 To text.Length - 1 Step 1
		If text.CharAt(row) = "-" And row = ind + 1 Then
			rightCtr = row
		Else If IsNumber(text.CharAt(row)) Or text.CharAt(row) = "." Then
			rightCtr = row
		Else
			Exit
		End If
	Next

	If rightCtr = ind Then
		'Log("R: True")
		Return ""
	End If
	Return text.SubString2(ind + 1, rightCtr + 1)
End Sub

Private Sub Solve
	text = lblPrompt.Text
	Log("START: " & text)
	lblLog.Text = ""
	lblLog.Text = "START: " & text & CRLF
	'Log(" ")
	lblResult.Text = ""
	ProcessOperators("÷")
	ProcessOperators("x")
	ProcessOperators("%")
	ProcessOperators("+")
	ProcessOperators("-")
	Log(" ")
	Log("RESULT: " & text)
	lblLog.Text = lblLog.Text & CRLF & " " & CRLF & "RESULT: " & text
	lblResult.Text = text
	Log("---------------------------------")
End Sub

Private Sub btnOperation_Click()
	btnSender = Sender
	Dim prev As Char
	If lblPrompt.Text.Length > 0 Then
		prev = lblPrompt.Text.CharAt(lblPrompt.Text.Length - 1)
	Else
		' Handle the case where the text is empty
		prev = "`"
	End If
		
	If prev = "-" And lblPrompt.Text.Length = 1 Then
		Return
	End If
	
	Select btnSender.Tag
		Case "="
			If lblResult.Text = "∞" Then
				lblResult.SetTextSizeAnimated(200,40)
				
				Exit
			Else If lblPrompt.Text = "" Then
				Exit
			Else If lblResult.Text = "Cannot divide by 0" Then
				Exit
			Else If Not(IsNumber(lblResult.Text)) Then
				lblResult.Text = "Expression Error"
			Else
				lblPopAnimation(lblPrompt, 400,Colors.Yellow)
				lblPrompt.Text = lblResult.Text				
				lblResult.Text = ""
			End If
		Case "-"
			Select prev
				Case "-"				
					If lblPrompt.Text.Length > 1 Then
						Dim prev2 As Char = lblPrompt.Text.CharAt(lblPrompt.Text.Length - 2)
					Else
						Exit
					End If
					
					lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
					lblPrompt.Text = lblPrompt.Text & "+"
					If prev2 = "+" Or prev2 = "x" Or prev2 = "%" Or prev2 = "÷" Then
						lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 2)
						lblPrompt.Text = lblPrompt.Text & "+"
					End If
					
				Case "+"
					lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
					lblPrompt.Text = lblPrompt.Text & "-"
					
				Case Else
					lblPrompt.Text = lblPrompt.Text & btnSender.Text
				If lblPrompt.TextColor <> promptTxtColor Then
				lblPrompt.SetTextColorAnimated(400,promptTxtColor)
				End If
			End Select
			Solve
			
		Case "+"			
			Select prev
				Case "`"
					Return
				Case "-"
					lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
					lblPrompt.Text = lblPrompt.Text & "+"
				Case "+"
					Exit
				Case "x","÷","%"
					lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
					lblPrompt.Text = lblPrompt.Text & "+"
				Case Else
					lblPrompt.Text = lblPrompt.Text & btnSender.Text
				If lblPrompt.TextColor <> promptTxtColor Then
				lblPrompt.SetTextColorAnimated(400,promptTxtColor)
				End If
			End Select
			Solve
		Case Else
			Select prev
				Case "`"
					Return
				Case "-"
					lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
				Case "+"
					lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
				Case "x"
					lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
				Case "%"
					lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
				Case "÷"
					lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
			End Select
			
			If lblPrompt.TextColor <> promptTxtColor Then
				lblPrompt.SetTextColorAnimated(400,promptTxtColor)
			End If
			lblPrompt.Text = lblPrompt.Text & btnSender.Text
			Solve
	End Select
	'lblPrompt.SetTextColorAnimated(1000,promptTxtColor)
	If lblPrompt.Text.Length < 10 Then
		lblPrompt.TextSize = 50
	Else If lblPrompt.Text.Length < 20 Then
		lblPrompt.TextSize = 40
	Else
		lblPrompt.TextSize = 30
	End If
End Sub

Private Sub btnAction_Click
	btnSender = Sender
	
	Select btnSender.Tag
		Case "AC"
			lblPrompt.Text = ""
			lblResult.Text = ""
			lblLog.Text = ""
		Case "BS"
			If lblPrompt.Text.Length > 0 Then
				lblPrompt.Text = lblPrompt.Text.SubString2(0, lblPrompt.Text.Length - 1)
				Solve
			End If
		Case "Dot"
			lblPrompt.Text = lblPrompt.Text & btnSender.Text
		Case "logs"
			If Not(lblLog.Visible) Then
				lblLog.Visible = True
			Else
				lblLog.Visible = False
			End If
		Case Else
			lblPrompt.Text = lblPrompt.Text & btnSender.Text
			Solve
	End Select
	If lblPrompt.TextColor <> promptTxtColor Then
		lblPrompt.SetTextColorAnimated(400,promptTxtColor)
	End If
	If lblPrompt.Text.Length < 10 Then
		lblPrompt.TextSize = 50
	Else If lblPrompt.Text.Length < 20 Then
		lblPrompt.TextSize = 40
	Else
		lblPrompt.TextSize = 30
	End If
End Sub

Private Sub lblPopAnimation(label As Label, time As Int,color As Int)
	Log(label.TextSize)
	Dim origSize As Float = label.TextSize
	label.TextSize = 10
	
	label.SetTextColorAnimated(time,color)
	label.SetTextSizeAnimated(time,origSize)
End Sub